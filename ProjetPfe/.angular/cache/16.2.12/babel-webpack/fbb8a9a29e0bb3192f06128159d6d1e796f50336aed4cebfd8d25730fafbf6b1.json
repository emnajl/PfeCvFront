{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthentifcationService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n  }\n  login(username, password) {\n    let options = {\n      headers: new HttpHeaders().set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    };\n    let params = new HttpParams().set(\"username\", username).set(\"password\", password);\n    return this.http.post(\"http://localhost:8085/auth/login\", params, options);\n  }\n  loadProfile(data) {\n    let jwtToken = data['access-token'];\n  }\n  static #_ = this.ɵfac = function AuthentifcationService_Factory(t) {\n    return new (t || AuthentifcationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthentifcationService,\n    factory: AuthentifcationService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthentifcationService };","map":{"version":3,"names":["HttpHeaders","HttpParams","AuthentifcationService","constructor","http","isAuthenticated","login","username","password","options","headers","set","params","post","loadProfile","data","jwtToken","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\services\\authentifcation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n//import { UntypedFormBuilder } from '@angular/forms';\n//import { Observable, of, throwError } from 'rxjs';\nimport { __values } from 'tslib';\n\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthentifcationService {\n  isAuthenticated : boolean =false;\n  roles : any;\n  username : any;\n  accessToken!: string;\n\n  constructor(private  http:HttpClient){}\n   \n   public login(username : string , password:string){\n    let options={\n      headers : new HttpHeaders().set(\"Content-Type\",\"application/x-www-form-urlencoded\")\n    }\n    let params=new HttpParams().set(\"username\",username).set(\"password\",password);\n     return this .http.post(\"http://localhost:8085/auth/login\" ,params,options)\n   }\n   loadProfile(data:any){\n    let jwtToken=data['access-token'];\n   }\n  }"],"mappings":"AAMA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;;;AAE1E,MAGaC,sBAAsB;EAMjCC,YAAqBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IALzB,KAAAC,eAAe,GAAY,KAAK;EAKM;EAE9BC,KAAKA,CAACC,QAAiB,EAAGC,QAAe;IAC/C,IAAIC,OAAO,GAAC;MACVC,OAAO,EAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAC,mCAAmC;KACnF;IACD,IAAIC,MAAM,GAAC,IAAIX,UAAU,EAAE,CAACU,GAAG,CAAC,UAAU,EAACJ,QAAQ,CAAC,CAACI,GAAG,CAAC,UAAU,EAACH,QAAQ,CAAC;IAC5E,OAAO,IAAI,CAAEJ,IAAI,CAACS,IAAI,CAAC,kCAAkC,EAAED,MAAM,EAACH,OAAO,CAAC;EAC5E;EACAK,WAAWA,CAACC,IAAQ;IACnB,IAAIC,QAAQ,GAACD,IAAI,CAAC,cAAc,CAAC;EAClC;EAAC,QAAAE,CAAA,G;qBAjBSf,sBAAsB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBpB,sBAAsB;IAAAqB,OAAA,EAAtBrB,sBAAsB,CAAAsB,IAAA;IAAAC,UAAA,EAFrB;EAAM;;SAEPvB,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}