{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserService {\n  constructor(http) {\n    this.http = http;\n  }\n  getuser() {\n    return this.http.get(\"http://localhost:8085/consultants\");\n  }\n  searchuser(keyword) {\n    return this.http.get(environment.backendHost + \"/customers/search?keyword=\" + keyword);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { UserService };","map":{"version":3,"names":["UserService","constructor","http","getuser","get","searchuser","keyword","environment","backendHost","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\servicesA\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Manager } from '../Model/Manager';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http:HttpClient) { }\n  public getuser():Observable<Array<Manager>>{\n    return this.http.get<Array<Manager>>(\"http://localhost:8085/consultants\")\n  }\n  public searchuser(keyword : string):Observable<Array<Manager>>{\n    return this.http.get<Array<Manager>>(environment.backendHost+\"/customers/search?keyword=\"+keyword)\n  }\n}\n"],"mappings":";;AAKA,MAGaA,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAChCC,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAiB,mCAAmC,CAAC;EAC3E;EACOC,UAAUA,CAACC,OAAgB;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAiBG,WAAW,CAACC,WAAW,GAAC,4BAA4B,GAACF,OAAO,CAAC;EACpG;EAAC,QAAAG,CAAA,G;qBARUT,WAAW,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXd,WAAW;IAAAe,OAAA,EAAXf,WAAW,CAAAgB,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPjB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}