{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nfunction RegisterComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 16);\n    i0.ɵɵtext(2, \" You have successfully registered our app! \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegisterComponent_p_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 17);\n    i0.ɵɵtext(1, \"First Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nclass RegisterComponent {\n  constructor() {\n    this.user = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: ''\n    };\n    this.success = false;\n  }\n  onSubmit(registerForm) {\n    if (registerForm.valid) {\n      // Envoie des données du formulaire à votre API ou service\n      console.log('Form submitted:', this.user);\n      // Remplacez ce code par l'appel à votre API ou service pour enregistrer l'utilisateur\n      // Exemple :\n      // this.userService.registerUser(this.user).subscribe(response => {\n      //   console.log('Registration successful:', response);\n      //   this.success = true;\n      // }, error => {\n      //   console.error('Registration failed:', error);\n      // });\n      // Pour cet exemple, nous simulons simplement la réussite de l'enregistrement\n      this.success = true;\n    }\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 22,\n    vars: 3,\n    consts: [[1, \"container\"], [1, \"row\", \"col-md-8\", \"offset-md-2\"], [1, \"card\"], [1, \"card-header\"], [1, \"text-center\"], [4, \"ngIf\"], [1, \"card-body\"], [3, \"ngSubmit\"], [\"registerForm\", \"ngForm\"], [1, \"form-group\", \"mb-3\"], [1, \"form-label\"], [\"id\", \"firstName\", \"name\", \"firstName\", \"placeholder\", \"Enter first name\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"routerLink\", \"/login\"], [1, \"alert\", \"alert-info\"], [1, \"text-danger\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\", 4);\n        i0.ɵɵtext(5, \"Registration\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, RegisterComponent_div_6_Template, 3, 0, \"div\", 5);\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7, 8);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_8_listener() {\n          return ctx.onSubmit;\n        });\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"label\", 10);\n        i0.ɵɵtext(12, \"First Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_13_listener($event) {\n          return ctx.user.firstName = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, RegisterComponent_p_14_Template, 2, 0, \"p\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 13)(16, \"button\", 14);\n        i0.ɵɵtext(17, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"span\");\n        i0.ɵɵtext(19, \"Already registered? \");\n        i0.ɵɵelementStart(20, \"a\", 15);\n        i0.ɵɵtext(21, \"Login here\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(9);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.success);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.user.firstName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", _r1.controls[\"firstName\"].invalid && (_r1.controls[\"firstName\"].dirty || _r1.controls[\"firstName\"].touched));\n      }\n    },\n    dependencies: [i1.NgIf, i2.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { RegisterComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RegisterComponent","constructor","user","firstName","lastName","email","password","success","onSubmit","registerForm","valid","console","log","_","_2","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵtemplate","RegisterComponent_div_6_Template","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_8_listener","RegisterComponent_Template_input_ngModelChange_13_listener","$event","RegisterComponent_p_14_Template","ɵɵadvance","ɵɵproperty","_r1","controls","invalid","dirty","touched"],"sources":["C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\register\\register.component.ts","C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\register\\register.component.html"],"sourcesContent":["\nimport { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  user = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: ''\n  };\n  success = false;\n\n  onSubmit(registerForm: NgForm) {\n    if (registerForm.valid) {\n      // Envoie des données du formulaire à votre API ou service\n      console.log('Form submitted:', this.user);\n      // Remplacez ce code par l'appel à votre API ou service pour enregistrer l'utilisateur\n      // Exemple :\n      // this.userService.registerUser(this.user).subscribe(response => {\n      //   console.log('Registration successful:', response);\n      //   this.success = true;\n      // }, error => {\n      //   console.error('Registration failed:', error);\n      // });\n      // Pour cet exemple, nous simulons simplement la réussite de l'enregistrement\n      this.success = true;\n    }\n  }\n}\n\n","\n<div class=\"container\">\n    <div class=\"row col-md-8 offset-md-2\">\n        <div class=\"card\">\n            <div class=\"card-header\">\n                <h2 class=\"text-center\">Registration</h2>\n            </div>\n            <!-- Angular NgIf directive to show success message -->\n            <div *ngIf=\"success\">\n                <div class=\"alert alert-info\">\n                    You have successfully registered our app!\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <!-- Angular form binding and validation -->\n                <form (ngSubmit)=\"onSubmit\" #registerForm=\"ngForm\">\n                    <div class=\"form-group mb-3\">\n                        <label class=\"form-label\">First Name</label>\n                        <input class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"Enter first name\" [(ngModel)]=\"user.firstName\" required>\n                        <!-- Angular NgIf directive to show error message -->\n                        <p class=\"text-danger\" *ngIf=\"registerForm.controls['firstName'].invalid && (registerForm.controls['firstName'].dirty || registerForm.controls['firstName'].touched)\">First Name is required</p>\n                    </div>\n\n                    <!-- Repeat similar pattern for other form fields -->\n\n                    <div class=\"form-group\">\n                        <button class=\"btn btn-primary\" type=\"submit\">Register</button>\n                        <span>Already registered? <a routerLink=\"/login\">Login here</a></span>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n"],"mappings":";;;;;;ICQYA,EAAA,CAAAC,cAAA,UAAqB;IAEbD,EAAA,CAAAE,MAAA,kDACJ;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IASEH,EAAA,CAAAC,cAAA,YAAsK;IAAAD,EAAA,CAAAE,MAAA,6BAAsB;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;ADhBxN,MAKaC,iBAAiB;EAL9BC,YAAA;IAME,KAAAC,IAAI,GAAG;MACLC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;IACD,KAAAC,OAAO,GAAG,KAAK;;EAEfC,QAAQA,CAACC,YAAoB;IAC3B,IAAIA,YAAY,CAACC,KAAK,EAAE;MACtB;MACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACV,IAAI,CAAC;MACzC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,CAACK,OAAO,GAAG,IAAI;;EAEvB;EAAC,QAAAM,CAAA,G;qBAxBUb,iBAAiB;EAAA;EAAA,QAAAc,EAAA,G;UAAjBd,iBAAiB;IAAAe,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCR9BzB,EAAA,CAAAC,cAAA,aAAuB;QAIiBD,EAAA,CAAAE,MAAA,mBAAY;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAG7CH,EAAA,CAAA2B,UAAA,IAAAC,gCAAA,iBAIM;QACN5B,EAAA,CAAAC,cAAA,aAAuB;QAEbD,EAAA,CAAA6B,UAAA,sBAAAC,oDAAA;UAAA,OAAAJ,GAAA,CAAAd,QAAA;QAAA,EAAqB;QACvBZ,EAAA,CAAAC,cAAA,cAA6B;QACCD,EAAA,CAAAE,MAAA,kBAAU;QAAAF,EAAA,CAAAG,YAAA,EAAQ;QAC5CH,EAAA,CAAAC,cAAA,iBAAiI;QAAtCD,EAAA,CAAA6B,UAAA,2BAAAE,2DAAAC,MAAA;UAAA,OAAAN,GAAA,CAAApB,IAAA,CAAAC,SAAA,GAAAyB,MAAA;QAAA,EAA4B;QAAvHhC,EAAA,CAAAG,YAAA,EAAiI;QAEjIH,EAAA,CAAA2B,UAAA,KAAAM,+BAAA,gBAAgM;QACpMjC,EAAA,CAAAG,YAAA,EAAM;QAINH,EAAA,CAAAC,cAAA,eAAwB;QAC0BD,EAAA,CAAAE,MAAA,gBAAQ;QAAAF,EAAA,CAAAG,YAAA,EAAS;QAC/DH,EAAA,CAAAC,cAAA,YAAM;QAAAD,EAAA,CAAAE,MAAA,4BAAoB;QAAAF,EAAA,CAAAC,cAAA,aAAuB;QAAAD,EAAA,CAAAE,MAAA,kBAAU;QAAAF,EAAA,CAAAG,YAAA,EAAI;;;;QAnBrEH,EAAA,CAAAkC,SAAA,GAAa;QAAblC,EAAA,CAAAmC,UAAA,SAAAT,GAAA,CAAAf,OAAA,CAAa;QAUoFX,EAAA,CAAAkC,SAAA,GAA4B;QAA5BlC,EAAA,CAAAmC,UAAA,YAAAT,GAAA,CAAApB,IAAA,CAAAC,SAAA,CAA4B;QAE/FP,EAAA,CAAAkC,SAAA,GAA4I;QAA5IlC,EAAA,CAAAmC,UAAA,SAAAC,GAAA,CAAAC,QAAA,cAAAC,OAAA,KAAAF,GAAA,CAAAC,QAAA,cAAAE,KAAA,IAAAH,GAAA,CAAAC,QAAA,cAAAG,OAAA,EAA4I;;;;;;;SDX/KpC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}