{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authentifcation.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthenticationGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  CanActivate(route, state) {\n    let authenticated = this.authService.isAuthentifaction();\n    if (authenticated == false) {\n      this.router.navigateByUrl(\"/login\");\n      return false;\n    } else {\n      return true;\n    }\n  }\n  static #_ = this.ɵfac = function AuthenticationGuard_Factory(t) {\n    return new (t || AuthenticationGuard)(i0.ɵɵinject(i1.AuthentifcationService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationGuard,\n    factory: AuthenticationGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthenticationGuard };","map":{"version":3,"names":["AuthenticationGuard","constructor","authService","router","CanActivate","route","state","authenticated","isAuthentifaction","navigateByUrl","_","i0","ɵɵinject","i1","AuthentifcationService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\guards\\authentication.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Route, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthentifcationService } from '../services/authentifcation.service';\n@Injectable({\nprovidedIn:'root'\n})\nexport class AuthenticationGuard implements CanActivate{\n  constructor(private authService :AuthentifcationService,private router:Router){}\n  CanActivate(\n    route:ActivatedRouteSnapshot,\n    state:RouterStateSnapshot):Observable<Boolean> |UrlTree |Promise<Boolean> | UrlTree |Boolean |UrlTree {\n let authenticated = this.authService.isAuthentifaction();\n if(authenticated==false){\n  this.router.navigateByUrl(\"/login\");\n  return false;\n }\n else{\n  return true;\n }\n}\n}\n"],"mappings":";;;AAIA,MAGaA,mBAAmB;EAC9BC,YAAoBC,WAAmC,EAASC,MAAa;IAAzD,KAAAD,WAAW,GAAXA,WAAW;IAAiC,KAAAC,MAAM,GAANA,MAAM;EAAS;EAC/EC,WAAWA,CACTC,KAA4B,EAC5BC,KAAyB;IAC5B,IAAIC,aAAa,GAAG,IAAI,CAACL,WAAW,CAACM,iBAAiB,EAAE;IACxD,IAAGD,aAAa,IAAE,KAAK,EAAC;MACvB,IAAI,CAACJ,MAAM,CAACM,aAAa,CAAC,QAAQ,CAAC;MACnC,OAAO,KAAK;KACZ,MACG;MACH,OAAO,IAAI;;EAEb;EAAC,QAAAC,CAAA,G;qBAbYV,mBAAmB,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,sBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBjB,mBAAmB;IAAAkB,OAAA,EAAnBlB,mBAAmB,CAAAmB,IAAA;IAAAC,UAAA,EAFrB;EAAM;;SAEJpB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}