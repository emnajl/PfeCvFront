{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authentifcation.service\";\nimport * as i2 from \"@angular/router\";\nclass AppHttpInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    console.log(\"******\");\n    console.log(request.url);\n    // Vérifier si l'utilisateur est authentifié et si le jeton d'accès est disponible\n    if (this.authService.isAuthenticated && this.authService.accessToken) {\n      // Cloner la requête et ajouter l'en-tête d'authentification\n      let newRequest = request.clone({\n        headers: request.headers.set('Authorization', 'Bearer ' + this.authService.accessToken)\n      });\n      // Envoyer la nouvelle requête avec l'en-tête d'authentification\n      return next.handle(newRequest).pipe(catchError(err => {\n        this.authService.logout();\n        return throwError(err.message);\n      }));\n    } else {\n      // Si l'utilisateur n'est pas authentifié ou si le jeton d'accès est manquant, envoyer la requête d'origine sans en-tête d'authentification\n      return next.handle(request);\n    }\n  }\n  static #_ = this.ɵfac = function AppHttpInterceptor_Factory(t) {\n    return new (t || AppHttpInterceptor)(i0.ɵɵinject(i1.AuthentifcationService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppHttpInterceptor,\n    factory: AppHttpInterceptor.ɵfac\n  });\n}\nexport { AppHttpInterceptor };","map":{"version":3,"names":["catchError","throwError","AppHttpInterceptor","constructor","authService","router","intercept","request","next","console","log","url","isAuthenticated","accessToken","newRequest","clone","headers","set","handle","pipe","err","logout","message","_","i0","ɵɵinject","i1","AuthentifcationService","i2","Router","_2","factory","ɵfac"],"sources":["C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\interceptors\\app-http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { AuthentifcationService } from '../services/authentifcation.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AppHttpInterceptor implements HttpInterceptor {\n\n  constructor(private authService : AuthentifcationService,private router:Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    console.log(\"******\")\n    console.log(request.url);\n    // Vérifier si l'utilisateur est authentifié et si le jeton d'accès est disponible\n    if(this.authService.isAuthenticated && this.authService.accessToken){\n      // Cloner la requête et ajouter l'en-tête d'authentification\n      let newRequest = request.clone({\n        headers : request.headers.set('Authorization','Bearer '+this.authService.accessToken)\n      });\n      // Envoyer la nouvelle requête avec l'en-tête d'authentification\n      return next.handle(newRequest).pipe(\n        catchError(err=>{\n          this.authService.logout();\n          return throwError(err.message)\n        })\n\n      );\n    } else {\n      // Si l'utilisateur n'est pas authentifié ou si le jeton d'accès est manquant, envoyer la requête d'origine sans en-tête d'authentification\n      return next.handle(request);\n    }\n  }  \n}\n"],"mappings":"AAOA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAIzD,MACaC,kBAAkB;EAE7BC,YAAoBC,WAAoC,EAASC,MAAa;IAA1D,KAAAD,WAAW,GAAXA,WAAW;IAAkC,KAAAC,MAAM,GAANA,MAAM;EAAU;EAEjFC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxDC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrBD,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,GAAG,CAAC;IACxB;IACA,IAAG,IAAI,CAACP,WAAW,CAACQ,eAAe,IAAI,IAAI,CAACR,WAAW,CAACS,WAAW,EAAC;MAClE;MACA,IAAIC,UAAU,GAAGP,OAAO,CAACQ,KAAK,CAAC;QAC7BC,OAAO,EAAGT,OAAO,CAACS,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC,SAAS,GAAC,IAAI,CAACb,WAAW,CAACS,WAAW;OACrF,CAAC;MACF;MACA,OAAOL,IAAI,CAACU,MAAM,CAACJ,UAAU,CAAC,CAACK,IAAI,CACjCnB,UAAU,CAACoB,GAAG,IAAE;QACd,IAAI,CAAChB,WAAW,CAACiB,MAAM,EAAE;QACzB,OAAOpB,UAAU,CAACmB,GAAG,CAACE,OAAO,CAAC;MAChC,CAAC,CAAC,CAEH;KACF,MAAM;MACL;MACA,OAAOd,IAAI,CAACU,MAAM,CAACX,OAAO,CAAC;;EAE/B;EAAC,QAAAgB,CAAA,G;qBAzBUrB,kBAAkB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,sBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlB5B,kBAAkB;IAAA6B,OAAA,EAAlB7B,kBAAkB,CAAA8B;EAAA;;SAAlB9B,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}