{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthentifcationService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n  }\n  login(username, password) {\n    let options = {\n      headers: new HttpHeaders().set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    };\n    let params = new HttpParams().set(\"username\", username).set(\"password\", password);\n    return this.http.post(\"http://localhost:8085/auth/login\", params, options);\n  }\n  loadProfile(data) {\n    this.isAuthenticated = true;\n    this.accessToken = data['access-token'];\n    let decodedJwt = jwtDecode(this.accessToken);\n    this.username = decodedJwt.sub;\n    this.roles = decodedJwt.scope;\n  }\n  logout() {\n    this.isAuthenticated = false;\n    this.accessToken = undefined;\n  }\n  static #_ = this.ɵfac = function AuthentifcationService_Factory(t) {\n    return new (t || AuthentifcationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthentifcationService,\n    factory: AuthentifcationService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthentifcationService };","map":{"version":3,"names":["HttpHeaders","HttpParams","jwtDecode","AuthentifcationService","constructor","http","isAuthenticated","login","username","password","options","headers","set","params","post","loadProfile","data","accessToken","decodedJwt","sub","roles","scope","logout","undefined","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\services\\authentifcation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n//import { UntypedFormBuilder } from '@angular/forms';\n//import { Observable, of, throwError } from 'rxjs';\nimport { __values } from 'tslib';\n\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { jwtDecode } from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthentifcationService {\n  isAuthenticated : boolean =false;\n  roles : any;\n  username : any;\n  accessToken!: any;\n\n  constructor(private  http:HttpClient){}\n   \n   public login(username : string , password:string){\n    let options ={\n      headers : new HttpHeaders().set(\"Content-Type\",\"application/x-www-form-urlencoded\")\n    }\n    let params=new HttpParams().set(\"username\",username).set(\"password\",password);\n     return this .http.post(\"http://localhost:8085/auth/login\" ,params,options)\n   }\n   loadProfile(data:any){\n    this.isAuthenticated=true;\n    this.accessToken=data['access-token'];\n    let decodedJwt:any = jwtDecode(this.accessToken);\n    this.username= decodedJwt.sub;\n    this.roles=decodedJwt.scope;\n   }\n   logout(){\n    this.isAuthenticated=false;\n    this.accessToken=undefined;\n\n\n   }\n  }"],"mappings":"AAMA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAC1E,SAASC,SAAS,QAAQ,YAAY;;;AAEtC,MAGaC,sBAAsB;EAMjCC,YAAqBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IALzB,KAAAC,eAAe,GAAY,KAAK;EAKM;EAE9BC,KAAKA,CAACC,QAAiB,EAAGC,QAAe;IAC/C,IAAIC,OAAO,GAAE;MACXC,OAAO,EAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,cAAc,EAAC,mCAAmC;KACnF;IACD,IAAIC,MAAM,GAAC,IAAIZ,UAAU,EAAE,CAACW,GAAG,CAAC,UAAU,EAACJ,QAAQ,CAAC,CAACI,GAAG,CAAC,UAAU,EAACH,QAAQ,CAAC;IAC5E,OAAO,IAAI,CAAEJ,IAAI,CAACS,IAAI,CAAC,kCAAkC,EAAED,MAAM,EAACH,OAAO,CAAC;EAC5E;EACAK,WAAWA,CAACC,IAAQ;IACnB,IAAI,CAACV,eAAe,GAAC,IAAI;IACzB,IAAI,CAACW,WAAW,GAACD,IAAI,CAAC,cAAc,CAAC;IACrC,IAAIE,UAAU,GAAOhB,SAAS,CAAC,IAAI,CAACe,WAAW,CAAC;IAChD,IAAI,CAACT,QAAQ,GAAEU,UAAU,CAACC,GAAG;IAC7B,IAAI,CAACC,KAAK,GAACF,UAAU,CAACG,KAAK;EAC5B;EACAC,MAAMA,CAAA;IACL,IAAI,CAAChB,eAAe,GAAC,KAAK;IAC1B,IAAI,CAACW,WAAW,GAACM,SAAS;EAG3B;EAAC,QAAAC,CAAA,G;qBA3BSrB,sBAAsB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtB1B,sBAAsB;IAAA2B,OAAA,EAAtB3B,sBAAsB,CAAA4B,IAAA;IAAAC,UAAA,EAFrB;EAAM;;SAEP7B,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}