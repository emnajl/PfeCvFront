{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { UUID } from \"angular2-uuid\";\nimport * as i0 from \"@angular/core\";\nclass AuthentifcationService {\n  constructor() {\n    this.users = [];\n    this.users.push({\n      userId: UUID.UUID(),\n      username: \"user1\",\n      password: \"1234\",\n      roles: [\"USER\"]\n    });\n    this.users.push({\n      userId: UUID.UUID(),\n      username: \"user2\",\n      password: \"1234\",\n      roles: [\"USER\"]\n    });\n    this.users.push({\n      userId: UUID.UUID(),\n      username: \"admin\",\n      password: \"1234\",\n      roles: [\"USER\", \"ADMIN\"]\n    });\n  }\n  login(username, password) {\n    let appUser = this.users.find(u => u.username == username);\n    if (!appUser) return throwError(() => new Error(\"user not found\"));\n    if (appUser.password != password) {\n      return throwError(() => new Error(\"bad cerdentailes\"));\n    }\n    return of(appUser);\n  }\n  authenticatuser(appuser) {\n    this.authenticatedUser = appuser;\n    localStorage.setItem(\"autUser\", JSON.stringify({\n      username: appuser.username,\n      roles: appuser.roles,\n      jwt: \"JWT\"\n    }));\n    return of(true);\n  }\n  hasRole(role) {\n    return this.authenticatedUser.roles.includes(role);\n  }\n  isAuthentifaction() {\n    return this.authenticatedUser != undefined;\n  }\n  static #_ = this.ɵfac = function AuthentifcationService_Factory(t) {\n    return new (t || AuthentifcationService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthentifcationService,\n    factory: AuthentifcationService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthentifcationService };","map":{"version":3,"names":["of","throwError","UUID","AuthentifcationService","constructor","users","push","userId","username","password","roles","login","appUser","find","u","Error","authenticatuser","appuser","authenticatedUser","localStorage","setItem","JSON","stringify","jwt","hasRole","role","includes","isAuthentifaction","undefined","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\angularPfe\\ProjetPfe\\src\\app\\services\\authentifcation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Appuser } from '../Model/user.login';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { Observable, of, throwError } from 'rxjs';\nimport { __values } from 'tslib';\nimport{UUID} from \"angular2-uuid\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthentifcationService {\n  users: Appuser[]=[];\n  authenticatedUser : Appuser | undefined;\n\n  constructor() {\n    this.users.push({userId: UUID.UUID(),username:\"user1\", password:\"1234\", roles:[\"USER\"]});\n    this.users.push({userId: UUID.UUID(),username:\"user2\", password:\"1234\", roles:[\"USER\"]});\n    this.users.push({userId: UUID.UUID(),username:\"admin\", password:\"1234\", roles:[\"USER\",\"ADMIN\"]});\n   }\n   public login(username : String, password:String):Observable<Appuser>{\n     let appUser =this.users.find(u =>u.username==username);\n     if(!appUser)return throwError(()=>new Error(\"user not found\"));\n     if(appUser.password!=password){\n      return throwError(()=>new Error(\"bad cerdentailes\"));\n      \n     }\n     return of(appUser);\n   }\n   public authenticatuser( appuser:Appuser):Observable<Boolean>{\n    this.authenticatedUser =appuser;\n    localStorage.setItem(\"autUser\", JSON.stringify({username:appuser.username,roles : appuser.roles,jwt:\"JWT\"}))\n    return of(true);\n   }\n   public hasRole(role : String):Boolean{\n     return this.authenticatedUser!.roles.includes(role);\n   }\n   public isAuthentifaction(){\n    return this.authenticatedUser!=undefined;\n   }\n}\n"],"mappings":"AAGA,SAAqBA,EAAE,EAAEC,UAAU,QAAQ,MAAM;AAEjD,SAAOC,IAAI,QAAO,eAAe;;AAEjC,MAGaC,sBAAsB;EAIjCC,YAAA;IAHA,KAAAC,KAAK,GAAY,EAAE;IAIjB,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC;MAACC,MAAM,EAAEL,IAAI,CAACA,IAAI,EAAE;MAACM,QAAQ,EAAC,OAAO;MAAEC,QAAQ,EAAC,MAAM;MAAEC,KAAK,EAAC,CAAC,MAAM;IAAC,CAAC,CAAC;IACxF,IAAI,CAACL,KAAK,CAACC,IAAI,CAAC;MAACC,MAAM,EAAEL,IAAI,CAACA,IAAI,EAAE;MAACM,QAAQ,EAAC,OAAO;MAAEC,QAAQ,EAAC,MAAM;MAAEC,KAAK,EAAC,CAAC,MAAM;IAAC,CAAC,CAAC;IACxF,IAAI,CAACL,KAAK,CAACC,IAAI,CAAC;MAACC,MAAM,EAAEL,IAAI,CAACA,IAAI,EAAE;MAACM,QAAQ,EAAC,OAAO;MAAEC,QAAQ,EAAC,MAAM;MAAEC,KAAK,EAAC,CAAC,MAAM,EAAC,OAAO;IAAC,CAAC,CAAC;EACjG;EACOC,KAAKA,CAACH,QAAiB,EAAEC,QAAe;IAC7C,IAAIG,OAAO,GAAE,IAAI,CAACP,KAAK,CAACQ,IAAI,CAACC,CAAC,IAAGA,CAAC,CAACN,QAAQ,IAAEA,QAAQ,CAAC;IACtD,IAAG,CAACI,OAAO,EAAC,OAAOX,UAAU,CAAC,MAAI,IAAIc,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC9D,IAAGH,OAAO,CAACH,QAAQ,IAAEA,QAAQ,EAAC;MAC7B,OAAOR,UAAU,CAAC,MAAI,IAAIc,KAAK,CAAC,kBAAkB,CAAC,CAAC;;IAGrD,OAAOf,EAAE,CAACY,OAAO,CAAC;EACpB;EACOI,eAAeA,CAAEC,OAAe;IACtC,IAAI,CAACC,iBAAiB,GAAED,OAAO;IAC/BE,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACd,QAAQ,EAACS,OAAO,CAACT,QAAQ;MAACE,KAAK,EAAGO,OAAO,CAACP,KAAK;MAACa,GAAG,EAAC;IAAK,CAAC,CAAC,CAAC;IAC5G,OAAOvB,EAAE,CAAC,IAAI,CAAC;EAChB;EACOwB,OAAOA,CAACC,IAAa;IAC1B,OAAO,IAAI,CAACP,iBAAkB,CAACR,KAAK,CAACgB,QAAQ,CAACD,IAAI,CAAC;EACrD;EACOE,iBAAiBA,CAAA;IACvB,OAAO,IAAI,CAACT,iBAAiB,IAAEU,SAAS;EACzC;EAAC,QAAAC,CAAA,G;qBA5BS1B,sBAAsB;EAAA;EAAA,QAAA2B,EAAA,G;WAAtB3B,sBAAsB;IAAA4B,OAAA,EAAtB5B,sBAAsB,CAAA6B,IAAA;IAAAC,UAAA,EAFrB;EAAM;;SAEP9B,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}